{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","setAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","prototype","PropTypes","string","isRequired","defaultProps","Alert","alert","message","App","setmode","setalert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.59995454.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className = { `navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className =  \"container-fluid\">\r\n        <a className =  \"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className =  \"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className =  \"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className =  \"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className =  \"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className =  \"nav-item\">\r\n                <a className =  \"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className =  \"nav-item\">\r\n                <Link className =  \"nav-link\" to=\"/about\">About</Link>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className =  \"d-flex\">\r\n              <input className =  \"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className =  \"btn btn-danger\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`} >\r\n              <input className=\"form-check-input\" onClick = {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.prototype = {title : PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {title : 'TextUtils',\r\n}\r\n","import React, {useState} from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    // text = \"New Title\"; //Wrong way to change the text\r\n    // setText(\"New Title\"); // Correct way to change the text -> using Function\r\n    \r\n    const HandleUpClick = ()=>{\r\n        // console.log(\"UpperCase btn Clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.setAlert(\"Converted to Uppercase \", \"success\")\r\n    }\r\n    const HandleClearClick = ()=>{\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.setAlert(\"Cleared the text \", \"success\")\r\n    }\r\n    const HandleonChange = (event)=>{\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const HandleLowClick = () =>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.setAlert(\"Converted to Lowercase \", \"success\")\r\n    }\r\n\r\n    const HandleCopy =() =>{\r\n        var text = document.getElementById('mytext');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.setAlert(\"Text Copied \", \"success\")\r\n    }\r\n\r\n    const HandleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.setAlert(\"Extra Spaces Removed \" , \"success\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode === 'light' ? 'black' : 'white'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className = \"mb-3\">\r\n            {/* <label for=\"mytext\" className = \"form-label\">Example textarea</label> */}\r\n            <textarea className = \"form-control\" value={text} onChange={HandleonChange} style={{backgroundColor:props.mode === 'light' ? 'white' : '#1f5987', color:props.mode === 'light' ? 'black' : 'white'}} id=\"mytext\" rows=\"5\"></textarea>\r\n            </div>\r\n            <div className=\"flex\">\r\n                <button className=\"btn btn-warning mx-2\" onClick={HandleUpClick}>Convert To Uppercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={HandleLowClick}>Convert To Lowercase</button>\r\n                <button className=\"btn btn-secondary mx-2\" onClick={HandleClearClick}>Clear Text</button>\r\n                <button className=\"btn btn-info mx-2\" onClick={HandleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-dark mx-2\" onClick={HandleExtraSpaces}>Remove Extra Spaces </button>\r\n            </div>\r\n        </div>\r\n        <div className=\"container my-4\" style={{color:props.mode === 'light' ? 'black' : 'white'}}>\r\n            <h2>Your Text Summery</h2>\r\n            <p>'{text.split(\" \").length}' Words and '{text.length}' Characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0 ? text : 'Enter something in textbox to preview it.'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    // const capitalize = (word) =>{\r\n    //     const lower = word.toLowerCase();\r\n    //     return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    // }\r\n    return (\r\n        props.alert && <div className = {`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{props.alert.type}</strong> : {props.alert.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from './components/TextForm'\nimport React, { useState } from 'react'\nimport Alert from \"./components/Alert\";\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   // Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n\n  const [alert, setalert] = useState(\"null\");\n\n  // Function that used for setAlert which is not the from the useState\n  const setAlert = (message, type) =>{\n    setalert({\n      message : message,\n      type : type,\n    });\n    setTimeout(() =>{\n       setalert(null);\n    }, 1000)\n  }\n  const toggleMode = () =>{\n    if(mode === 'light'){\n      setmode('dark');\n      document.body.style.backgroundColor = '#042743';\n      setAlert(\"Dark Mode Enabled.\" , \"success\");\n      document.title = \"Dark Mode\";\n    }\n    else{\n      setmode('light');\n      document.body.style.backgroundColor = 'white';\n      setAlert(\"Light Mode Enabled.\" , \"success\");\n      document.title = \"Light Mode\"; \n    }\n  }\n  return (\n    <>    \n\n    {/* <Router> */}\n\n    <Navbar  title=\"Text Transformer\" mode = {mode} toggleMode= {toggleMode}/> {/* Props Used*}\n    {/* <Navbar /> */}\n\n    <Alert alert = {alert}/>\n\n    <div className=\"container my-3\">\n\n    {/* <Switch>\n      <Route exact path=\"/about\">\n        <About />\n      </Route>\n      <Route exact path=\"/\"> */}\n        <TextForm setAlert = {setAlert} heading=\"Text to analyze : \" mode={mode}/>\n      {/* </Route>\n    </Switch> */}\n\n      \n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}